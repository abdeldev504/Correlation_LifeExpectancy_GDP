# -*- coding: utf-8 -*-
"""correlation_lifeExpectancy_GDP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lMD_0eM6c1TaHjbEwcpNvrATmHmcevya
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import numpy as np

# 1 - Chargement et nettoyage des données

# Espérance de vie
url_life_expectancy = "https://fr.wikipedia.org/wiki/Liste_des_pays_par_esp%C3%A9rance_de_vie"

# Lire les tableaux depuis la page
tables_life = pd.read_html(url_life_expectancy, header=0)

# Identifier le tableau pertinent
life_expectancy_table = tables_life[0]

# Renommer et sélectionner les colonnes nécessaires
life_expectancy_table = life_expectancy_table.rename(columns={
    "Pays": "Country",
    "Espérance de vie pour les deux sexes": "Life Expectancy"
})

# Garder uniquement les colonnes nécessaires
life_expectancy_table = life_expectancy_table[["Country", "Life Expectancy"]]

# Nettoyer la colonne "Life Expectancy"
life_expectancy_table["Life Expectancy"] = (
    life_expectancy_table["Life Expectancy"]
    .astype(str)  # Convertir en chaîne
    .str.replace(",", ".")  # Remplacer les virgules par des points
    .astype(float)  # Convertir en float
)

# Corriger les valeurs aberrantes (supérieures à 200, probablement mal échelonnées)
life_expectancy_table.loc[life_expectancy_table["Life Expectancy"] > 200, "Life Expectancy"] /= 10

# Nettoyer la colonne "Country"
life_expectancy_table["Country"] = (
    life_expectancy_table["Country"]
    .str.replace("Drapeau de ", "", regex=True)
    .str.strip()
)

# Vérifier les données après nettoyage
print(life_expectancy_table.head())

# URL des données de PIB
url_gdp = "https://fr.wikipedia.org/wiki/Liste_des_pays_par_PIB_nominal_par_habitant"

# Lire les tableaux depuis la page
tables_gdp = pd.read_html(url_gdp, header=0)

# Identifier le tableau pertinent
gdp_table = tables_gdp[1]

# Renommer et sélectionner les colonnes nécessaires
gdp_table = gdp_table.rename(columns={
    "Pays ou territoire": "Country",
    "PIB par habitant (en dollars)": "GDP per Capita"
})

# Garder uniquement les colonnes nécessaires
gdp_table = gdp_table[["Country", "GDP per Capita"]]

# Nettoyer la colonne "GDP per Capita"
gdp_table["GDP per Capita"] = (
    gdp_table["GDP per Capita"]
    .astype(str)
    .str.replace(r"\[\d+\]", "", regex=True)  # Supprimer annotations
    .str.replace(r"\(.*\)", "", regex=True)  # Supprimer parenthèses
    .str.replace(r"\s", "", regex=True)  # Supprimer espaces
    .astype(float)
)

# Nettoyer la colonne "Country"
gdp_table["Country"] = (
    gdp_table["Country"]
    .str.replace("Drapeau de ", "", regex=True)
    .str.strip()
)

# Vérifier les données
print(gdp_table.head())

# Dictionnaire de correspondance
country_mapping = {
    "Cuba": "Cuba",  # Correspondance directe
    "Belarus": "Biélorussie",
    "Azerbaijan": "Azerbaïdjan",
    "Israel": "Israël",
    "Corée du Nord": "Corée du Nord",  # Correspondance directe
    "Myanmar": "Birmanie",
    "El Salvador": "Salvador",
    "Congo": "République du Congo",
    "Vietnam": "Viêt Nam",
    "Île Maurice": "Maurice",
    "Haiti": "Haïti",
    "Fiji": "Fidji",
    "Nepal": "Népal"
}

# Appliquer le mapping aux deux tables
life_expectancy_table["Country"] = life_expectancy_table["Country"].replace(country_mapping)
gdp_table["Country"] = gdp_table["Country"].replace(country_mapping)

# Fusion après corrections
merged_data = pd.merge(
    life_expectancy_table,
    gdp_table,
    on="Country",
    how="inner"
)

# Vérifier le nouveau résultat
print(f"Nombre de pays appariés après fusion : {merged_data.shape[0]}")
print(merged_data.head())

# Diviser les valeurs aberrantes par 10
merged_data.loc[merged_data["Life Expectancy"] > 200, "Life Expectancy"] /= 10

# 2. Analyse et visualisation

from sklearn.linear_model import LinearRegression
import numpy as np

# Préparer les données pour la régression
X = np.log(merged_data["GDP per Capita"].values.reshape(-1, 1))
y = merged_data["Life Expectancy"].values

# Ajuster un modèle de régression linéaire
model = LinearRegression()
model.fit(X, y)

# Ajouter les prédictions et les résidus au dataset
merged_data["Predicted Life Expectancy"] = model.predict(X)
merged_data["Residual"] = merged_data["Life Expectancy"] - merged_data["Predicted Life Expectancy"]

# Vérifier si la colonne Residual est bien ajoutée
print(merged_data.head())

# Trier les pays par résidus positifs (au-dessus de la tendance)
high_performers = merged_data[merged_data["Residual"] > 0].sort_values(by="Residual", ascending=False)
high_performers = high_performers.head(20)
# Afficher les pays qui s'en sortent le mieux
print("Pays avec une espérance de vie nettement supérieure à leur PIB :")
print(high_performers.head(20))

# Filtrer les pays avec un résidu négatif et un PIB par habitant supérieur à 20 000
low_performers_high_pib = merged_data[
    (merged_data["Residual"] < 0) & (merged_data["GDP per Capita"] > 20000)
].sort_values(by="Residual", ascending=True)

# Afficher les pays qui s'en sortent le moins bien parmi les pays riches
print("Pays avec un PIB par habitant supérieur à 20 000 et une espérance de vie inférieure à la tendance :")
print(low_performers_high_pib.head(5))

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Liste des pays méditerranéens
mediterranean_countries = [
    "Albanie", "Algérie", "Bosnie-Herzégovine", "Chypre", "Croatie",
    "Égypte", "Espagne", "France", "Grèce", "Israël", "Italie",
    "Liban", "Libye", "Malte", "Maroc", "Monaco", "Monténégro",
    "Palestine", "Slovénie", "Syrie", "Tunisie", "Turquie"
]

# Liste des pays d'Amérique Latine
latin_america_countries = [
    "Argentine", "Bolivie", "Brésil", "Chili", "Colombie", "Costa Rica", "Cuba",
    "République Dominicaine", "Équateur", "El Salvador", "Guatemala", "Honduras",
    "Jamaïque", "Mexique", "Nicaragua", "Panama", "Paraguay", "Pérou",
    "Porto Rico", "Uruguay", "Venezuela"
]

# Liste des pays à annoter
countries_to_annotate = ["Argentine", "Bolivie", "Chili", "Colombie", "Costa Rica", "Cuba",
    "République Dominicaine", "El Salvador", "Guatemala",
    "Jamaïque", "Mexique", "Nicaragua", "Paraguay", "Pérou",
    "Porto Rico", "Uruguay", "Venezuela","Albanie", "Algérie", "Bosnie-Herzégovine", "Chypre", "Croatie",
    "Égypte", "Espagne", "France", "Grèce", "Italie", "Libye", "Malte", "Maroc", "Monaco",
    "Palestine", "Tunisie", "Turquie", "États-Unis", "Koweït", "Qatar", "Émirats arabes unis", "Arabie saoudite"]

# Ajouter une colonne pour identifier les régions
merged_data["Region"] = merged_data["Country"].apply(
    lambda row: "Méditerranée" if row in mediterranean_countries else
                "Amérique Latine" if row in latin_america_countries else
                "Autre"
)

# Calcul du pourcentage de pays au-dessus de la tendance par région
merged_data["Trend"] = np.where(merged_data["Residual"] > 0, "Au-dessus de la tendance", "En dessous de la tendance")

med_above = len(merged_data[(merged_data["Region"] == "Méditerranée") & (merged_data["Trend"] == "Au-dessus de la tendance")])
med_total = len(merged_data[merged_data["Region"] == "Méditerranée"])
lat_above = len(merged_data[(merged_data["Region"] == "Amérique Latine") & (merged_data["Trend"] == "Au-dessus de la tendance")])
lat_total = len(merged_data[merged_data["Region"] == "Amérique Latine"])

med_percentage = (med_above / med_total) * 100 if med_total > 0 else 0
lat_percentage = (lat_above / lat_total) * 100 if lat_total > 0 else 0

# Style général
sns.set(style='whitegrid', font_scale=1.2)

# Graphique combiné
plt.figure(figsize=(10, 8))
plt.gca().set_facecolor('#f0f0f0')

# Points colorés pour les régions et les autres pays
sns.scatterplot(
    x=np.log(merged_data["GDP per Capita"]),
    y=merged_data["Life Expectancy"],
    hue=merged_data["Region"],
    palette={"Méditerranée": "orange", "Amérique Latine": "purple", "Autre": "gray"},
    alpha=0.8
)

# Ligne de régression (prédictions)
sns.regplot(
    x=np.log(merged_data["GDP per Capita"]),
    y=merged_data["Predicted Life Expectancy"],
    scatter=False,
    color='blue',
    line_kws={'linestyle': '--', 'linewidth': 2, 'alpha': 0.8}
)

# Annoter uniquement les pays de la liste
for i, row in merged_data.iterrows():
    dy = 0.5
    if row["Country"] in ["Maroc", "Espagne", "Algérie"]:
        dy = 1
    if row["Country"] in countries_to_annotate:
        plt.text(
            np.log(row["GDP per Capita"]),
            row["Life Expectancy"] + dy,
            row["Country"],
            fontsize=9,
            color="black"
        )

# Ajouter les pourcentages sur le graphique
plt.text(
    9, 63,  # Position du texte pour Méditerranée
    f"Pourcentage de pays Méditerranéens au-dessus de la tendance : {med_percentage:.2f}%",
    fontsize=9,
    color="orange",
    bbox=dict(facecolor="white", edgecolor="orange", boxstyle="round,pad=0.5")
)

plt.text(
    8, 59,  # Position du texte pour Amérique Latine
    f"Pourcentage de pays d'Amérique Latine au-dessus de la tendance : {lat_percentage:.2f}%",
    fontsize=9,
    color="purple",
    bbox=dict(facecolor="white", edgecolor="purple", boxstyle="round,pad=0.5")
)

# Détails du graphique
plt.title("Régression et analyse des régions : Espérance de vie vs PIB", fontsize=16)
plt.xlabel("PIB par habitant (logarithme naturel)", fontsize=14)
plt.ylabel("Espérance de vie (années)", fontsize=14)
plt.legend(title="Régions", loc="upper left")
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Création de la figure avec deux colonnes
fig, axes = plt.subplots(1, 2, figsize=(15, 6), gridspec_kw={'width_ratios': [3, 2]})

# Graphique des résidus
axes[0].scatter(merged_data["Predicted Life Expectancy"], merged_data["Residual"], color='blue', alpha=0.6)
axes[0].axhline(0, color='red', linestyle='--', linewidth=1)
axes[0].set_title("Résidus vs Valeurs prédites", fontsize=16)
axes[0].set_xlabel("Espérance de vie prédite (années)", fontsize=14)
axes[0].set_ylabel("Résidus (années)", fontsize=14)

# Tableau des meilleurs résidus (valeurs absolues élevées) à droite
axes[1].axis('off')  # Désactiver les axes pour le tableau
table_data = high_performers[['Country', 'Residual']].reset_index(drop=True)
table = axes[1].table(
    cellText=table_data.values,
    colLabels=["Pays", "Résidus"],
    cellLoc='center',
    loc='center'
)
table.auto_set_font_size(False)
table.set_fontsize(12)
table.auto_set_column_width(col=list(range(len(table_data.columns))))

# Ajouter un titre au tableau
axes[1].set_title("Top 20 des plus grands résidus", fontsize=16, pad=20)

# Ajuster l'affichage global
plt.tight_layout()
plt.show()

from scipy.stats import shapiro

# Test de normalité des résidus
stat, p_value = shapiro(merged_data["Residual"])
print(f"Statistique du test de Shapiro-Wilk : {stat:.4f}")

plt.figure(figsize=(10, 8))
sns.scatterplot(
    x=np.log(merged_data["GDP per Capita"]),
    y=merged_data["Life Expectancy"],
    size=abs(merged_data["Residual"]),
    hue=np.where(merged_data["Residual"] > 0, "Supérieure à la tendance", "Inférieure à la tendance"),
    sizes=(50, 300), alpha=0.6, palette={"Supérieure à la tendance": "green", "Inférieure à la tendance": "red"}
)

# Ajouter une ligne de régression
sns.regplot(
    x=np.log(merged_data["GDP per Capita"]),
    y=merged_data["Predicted Life Expectancy"],
    scatter=False, color='blue', line_kws={'linestyle': '--'}
)

plt.title("Analyse des résidus : Espérance de vie vs PIB par habitant", fontsize=16)
plt.xlabel("PIB par habitant (logarithme naturel)", fontsize=14)
plt.ylabel("Espérance de vie (années)", fontsize=14)
plt.legend(title="Résidus", loc="upper left")
plt.tight_layout()
plt.show()
